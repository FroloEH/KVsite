---
import { Image } from 'astro:assets'
interface Props {
  src: string
  class?: string
  alt?: string
  lazy?: boolean
  hero?: boolean
  imageWidth?: number
  imageHeight?: number
}
let { src: imageUrl, class: cssClass, alt, lazy, imageHeight, imageWidth, hero } = Astro.props
const imagePath = (imageUrl.startsWith('/') ? imageUrl.slice(1) : imageUrl).toLowerCase()
const imageGlobPath = '/' + imagePath
const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/uploads/*.{jpeg,jpg,png,gif}')
if (!images[imageGlobPath])
  throw new Error(`"${imageGlobPath}" does not exist in glob: "src/images/uploads/*.{jpeg,jpg,png,gif}"`)

if (lazy == undefined) lazy = true

const defaultAlt = imagePath
  .split('/')
  .pop()
  ?.split('.')[0]
  .replace(/-/g, ' ')
  .replace(/\b\w/g, (char) => char.toUpperCase())
const altText = alt || defaultAlt || 'Image'

const maxWitdh = hero ? 2048 : imageWidth || 1024
const size1 = maxWitdh < 240 ? maxWitdh : 240
const size2 = maxWitdh < 540 ? maxWitdh : 540
const size3 = maxWitdh < 720 ? maxWitdh : 720
const size4 = maxWitdh < 1024 ? maxWitdh : 1024
---

<Image
  src={images[imageGlobPath]()}
  class={cssClass}
  alt={altText}
  loading={lazy ? 'lazy' : 'eager'}
  decoding={lazy ? 'async' : 'sync'}
  width={imageWidth}
  height={imageHeight}
  widths={[size1, size2, size3, size4, maxWitdh]}
  sizes={`(max-width: 240px) ${size1}px, (max-width: 540px) ${size2}px, (max-width: 720px) ${size3}px, (max-width: 1024px) ${size4}px, ${maxWitdh}px`}
/>
