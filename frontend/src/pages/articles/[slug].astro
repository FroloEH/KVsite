---
import Layout from '../../layouts/Layout.astro'
import StyledMarkdown from '../../components/shared/StyledMarkdown.astro'
import DynamicImage from '../../components/shared/DynamicImage.astro'
import { getCollection } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

export async function getStaticPaths() {
  const articles = await getCollection('articles')
  return articles.map((article) => ({ params: { slug: article.id } }))
}

const { slug } = Astro.params
const articles = await getCollection('articles')
const article = articles.find((a) => a.id === slug)
if (!article) {
  throw new Error(`Article not found: ${slug}`)
}
const { data, body } = article

// Find related articles by tag overlap, prefer newest
function getRelatedArticles(
  current: CollectionEntry<'articles'>,
  all: CollectionEntry<'articles'>[],
): CollectionEntry<'articles'>[] {
  if (!current?.data?.tags) return all.filter((a) => a.id !== current.id).slice(0, 3)
  return all
    .filter((a) => a.id !== current.id)
    .map((a) => ({
      ...a,
      tagScore: a.data.tags ? a.data.tags.filter((tag: string) => (current.data.tags ?? []).includes(tag)).length : 0,
    }))
    .sort((a: any, b: any) => {
      if (b.tagScore !== a.tagScore) return b.tagScore - a.tagScore
      return new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
    })
    .slice(0, 3)
}
const related = getRelatedArticles(article, articles)
---

<Layout title='Kráľovská knižnica'>
  <article class='prose flex flex-col md:flex-row md:gap-8 md:max-w-5xl bg-zinc-50 mx-auto max-w-5xl pt-36 pb-16 px-4'>
    <div class='flex-1'>
      <h2 class='text-3xl font-bold mb-2'>{data.title}</h2>
      {data.description && <p class='mb-4 text-lg text-emerald-900'>{data.description}</p>}
      <StyledMarkdown of={body ? body : ''} />
      {/* Less prominent date and tags below main text */}
      {
        (data.date || (data.tags && data.tags.length > 0)) && (
          <div class='mt-8 flex flex-col gap-2'>
            {data.date && <p class='text-gray-400 text-xs'>{data.date}</p>}
            {data.tags && data.tags.length > 0 && (
              <div class='flex flex-wrap gap-2'>
                {data.tags.map((tag: string) => (
                  <span class='bg-emerald-50 text-emerald-500 px-2 py-1 rounded text-xs'>{tag}</span>
                ))}
              </div>
            )}
          </div>
        )
      }
    </div>
    {
      data.image && (
        <div class='md:w-2/5 md:shrink-0 flex justify-center items-start mb-6 md:mb-0'>
          <DynamicImage src={data.image} alt={data.title} class='rounded-lg w-full max-h-96 object-cover' />
        </div>
      )
    }
  </article>
  <section class='max-w-3xl mx-auto my-24'>
    <h2 class='text-2xl font-bold mb-4'>Súvisiace články</h2>
    <ul class='grid gap-4 md:grid-cols-3'>
      {
        related.map((r) => (
          <li class='border rounded-lg p-4 bg-zinc-50 hover:shadow'>
            <a href={`/articles/${r.id}/`} class='font-semibold text-emerald-800 hover:underline'>
              {r.data.title}
            </a>
            {r.data.date && <div class='text-gray-500 text-xs mt-1'>{r.data.date}</div>}
            {r.data.tags && r.data.tags.length > 0 && (
              <div class='mt-2 flex flex-wrap gap-1'>
                {r.data.tags.map((tag: string) => (
                  <span class='bg-emerald-50 text-emerald-700 px-1 py-0.5 rounded text-xs'>{tag}</span>
                ))}
              </div>
            )}
          </li>
        ))
      }
    </ul>
  </section>
</Layout>
